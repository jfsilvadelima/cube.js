import type { CommanderStatic } from 'commander';
import fs from 'fs-extra';
import rp from 'request-promise';

import { displayError, event } from '../utils';

const wrapInQuotes = (values: string[]) => {
  if (values.length === 0) {
    return '\'\'';
  }

  return values
    .map(m => `'${m}'`)
    .join(' | ');
};

const createCubeProps = (cube: any) => {
  const cubeName = cube.title || cube.name;
  const dimensions = cube.dimensions.map((d) => d.name);
  const measures = cube.measures.map((m) => m.name);
  const timeDimensions = cube.dimensions.filter((d) => d.type === 'time').map((d) => d.name);
  const segments = cube.segments.map(s => s.name);

  return `
export type ${cubeName}Measure = ${wrapInQuotes(measures)};
export type ${cubeName}Dimension = ${wrapInQuotes(dimensions)};
export type ${cubeName}TimeDimension = ${wrapInQuotes(timeDimensions)};
export type ${cubeName}Segment = ${wrapInQuotes(segments)};
`;
};

const createTypeDefinitions = (cubes: any[]) => {
  const cubeNames = cubes.map(cube => cube.name);
  const topLevelTypes = [
    'Measure',
    'Dimension',
    'TimeDimension',
    'Segment',
  ];

  return `// DO NOT MANUALLY EDIT - THIS FILE IS AUTOMATICALLY GENERATED

export type Cubes = ${cubeNames.map(c => `'${c}'`).join(' | ')};

${cubes.map(createCubeProps).join('\n')}

${topLevelTypes.map((topLevelType) => `
export type ${topLevelType} = ${cubeNames.map(c => `${c}${topLevelType}`).join(' | ')};
`).join('\n')}
`;
};

const generateQueryTypes = async (apiUrl: string, currentToken: string) => {
  const meta = await rp({
    headers: {
      authorization: currentToken,
    },
    url: `${apiUrl}/meta`,
    json: true
  });

  const typeDefs = createTypeDefinitions(meta.cubes);
  const pathToCubeClient = require.resolve('@cubejs-client/core');
  const pathToDefinitionFile = pathToCubeClient.replace('/dist/cubejs-client-core.js', '/generated.d.ts');
  await fs.writeFile(pathToDefinitionFile, typeDefs);

  await event({
    event: 'Cube CLI Generate Types'
  });

  console.log('Types successfully generated!');
};

export function configureTypegenCommand(program: CommanderStatic): void {
  program
    .command('typegen <API_URL> <TOKEN>')
    .description('Generate types from your Cube API for your frontend project')
    .action(
      (apiUrl, currentToken) => generateQueryTypes(apiUrl, currentToken)
        .catch(e => displayError(e.stack || e))
    )
    .on('--help', () => {
      console.log('');
      console.log('Example:');
      console.log('');
      console.log('  $ cubejs typegen http://localhost:4000/cubejs-api/v1 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkZXBsb3ltZW50SWQiOiIxIiwidXJsIjoiaHR0cHM6Ly9leGFtcGxlcy5jdWJlY2xvdWQuZGV2IiwiaWF0IjoxNTE2MjM5MDIyfQ.La3MiuqfGigfzADl1wpxZ7jlb6dY60caezgqIOoHt-c');
    });
}
